browseVignettes("VariantAnnotation")
fl <- system.file("extdata", "variants.vcf", package="VariantAnnotation")
fl <- system.file("extdata", "variants.vcf", package="VariantAnnotation")
help(readVcf)
library(VariantAnnotation)
zygosityMatrix <- readGeno("variants.vcf", "GT", row.names = FALSE)
setwd("~/R")
zygosityMatrix <- readGeno("variants.vcf", "GT", row.names = FALSE)
zygosityCountsPerSample <- function(GTmatrix){
## getting the dimensions of the matrix that is received as an argument to this function
numberLoci       <- dim(GTmatrix)[1]
numberSamples    <- dim(GTmatrix)[2]
## for-loop used to iterate on the columns of the GTmatrix,
## adding up counts for each of "./.", "0/0", "1/1", "0/1"
## via the count(matrix, value=termToMatchOn) function
## C.f. this "outer" loop (to the inner "count()" loops) is in row-major order
## i.e. akin to the elements of a row being consecutively referenced / "contiguous in memory"
for (i in 1:numberSamples){
## print("inside loop i = ")
## print(i)
## var definition statements
## these 4 counts reset at the beginning of each iteration of this outer loop
## (outer loop is for iterating on the samples, i.e. the 100 columns:
## one column for each of the 100 samples)
numberGTNotAvailable      <- 0          ## counting all instances of ./.
numberGTHomozygousRef     <- 0          ## counting all instances of 0/0
numberGTHomozygousAlt     <- 0          ## counting all instances of 1/1
numberGTHeterozygous      <- 0          ## counting all instances of 0/1
## the count() function is used to loop through and count the zygosity numbers,
## on a per-sample basis (i.e. count() iterates on the VCF records (i.e. the rows)
## of a given sample/column, while the outer loop iterates on the columns themselves)
## C.f. these inner loops (to the outer for-loop) is in column-major order
## i.e. akin to the elements of a column being consecutively referenced / "contiguous in memory"
numberGTNotAvailable      <- count(GTmatrix[,i], value = "./.")
numberGTHomozygousRef     <- count(GTmatrix[,i], value = "0/0")
numberGTHomozygousAlt     <- count(GTmatrix[,i], value = "1/1")
numberGTHeterozygous      <- count(GTmatrix[,i], value = "0/1")
## saving the resulting counts for each sample in a matrix of size 4 x 100
## (each of the 100 samples has 4 counts)
GTResultsMatrixPerSample[1,i] <<- numberGTNotAvailable
GTResultsMatrixPerSample[2,i] <<- numberGTHomozygousRef
GTResultsMatrixPerSample[3,i] <<- numberGTHomozygousAlt
GTResultsMatrixPerSample[4,i] <<- numberGTHeterozygous
# GTResultsMatrixPerSample[i,1] <<- numberGTNotAvailable
# GTResultsMatrixPerSample[i,2] <<- numberGTHomozygousRef
# GTResultsMatrixPerSample[i,3] <<- numberGTHomozygousAlt
# GTResultsMatrixPerSample[i,4] <<- numberGTHeterozygous
}
############IN-PROGRESS###################
## summary statistics - calculating the average # of all for counts, across all 100 samples
averageGTNotAvailable     <- 0          ## average of all instances of ./.
averageGTHomozygousRef    <- 0          ## average of all instances of 0/0
averageGTHomozygousAlt    <- 0          ## average of all instances of 1/1
averageGTHeterozygous     <- 0          ## average of all instances of 0/1
############IN-PROGRESS###################
## print statements for summary
## (will probably remove this after testing -- summarizing 100 samples: meh.)
print("sample 1 zygosity Results:")
cat(sprintf("%i counts of './.'", GTResultsMatrixPerSample[1,1]),"\n")
cat(sprintf("%i counts of '0/0'", GTResultsMatrixPerSample[2,1]),"\n")
cat(sprintf("%i counts of '1/1'", GTResultsMatrixPerSample[3,1]),"\n")
cat(sprintf("%i counts of '0/1'", GTResultsMatrixPerSample[4,1]))
}
zygosityCountsPerSample(zygosityMatrix)
GTResultsMatrixPerSample <- matrix(nrow = 4, ncol = 100)
zygosityCountsPerSample(zygosityMatrix)
View(GTResultsMatrixPerSample)
rm(GTResultsMatrixPerSample)
GTResultsMatrixPerSample <- matrix(nrow = 100, ncol = 4)
zygosityCountsPerSample <- function(GTmatrix){
## getting the dimensions of the matrix that is received as an argument to this function
numberLoci       <- dim(GTmatrix)[1]
numberSamples    <- dim(GTmatrix)[2]
## for-loop used to iterate on the columns of the GTmatrix,
## adding up counts for each of "./.", "0/0", "1/1", "0/1"
## via the count(matrix, value=termToMatchOn) function
## C.f. this "outer" loop (to the inner "count()" loops) is in row-major order
## i.e. akin to the elements of a row being consecutively referenced / "contiguous in memory"
for (i in 1:numberSamples){
## print("inside loop i = ")
## print(i)
## var definition statements
## these 4 counts reset at the beginning of each iteration of this outer loop
## (outer loop is for iterating on the samples, i.e. the 100 columns:
## one column for each of the 100 samples)
numberGTNotAvailable      <- 0          ## counting all instances of ./.
numberGTHomozygousRef     <- 0          ## counting all instances of 0/0
numberGTHomozygousAlt     <- 0          ## counting all instances of 1/1
numberGTHeterozygous      <- 0          ## counting all instances of 0/1
## the count() function is used to loop through and count the zygosity numbers,
## on a per-sample basis (i.e. count() iterates on the VCF records (i.e. the rows)
## of a given sample/column, while the outer loop iterates on the columns themselves)
## C.f. these inner loops (to the outer for-loop) is in column-major order
## i.e. akin to the elements of a column being consecutively referenced / "contiguous in memory"
numberGTNotAvailable      <- count(GTmatrix[,i], value = "./.")
numberGTHomozygousRef     <- count(GTmatrix[,i], value = "0/0")
numberGTHomozygousAlt     <- count(GTmatrix[,i], value = "1/1")
numberGTHeterozygous      <- count(GTmatrix[,i], value = "0/1")
## saving the resulting counts for each sample in a matrix of size 4 x 100
## (each of the 100 samples has 4 counts)
# GTResultsMatrixPerSample[1,i] <<- numberGTNotAvailable
# GTResultsMatrixPerSample[2,i] <<- numberGTHomozygousRef
# GTResultsMatrixPerSample[3,i] <<- numberGTHomozygousAlt
# GTResultsMatrixPerSample[4,i] <<- numberGTHeterozygous
GTResultsMatrixPerSample[i,1] <<- numberGTNotAvailable
GTResultsMatrixPerSample[i,2] <<- numberGTHomozygousRef
GTResultsMatrixPerSample[i,3] <<- numberGTHomozygousAlt
GTResultsMatrixPerSample[i,4] <<- numberGTHeterozygous
}
############IN-PROGRESS###################
## summary statistics - calculating the average # of all for counts, across all 100 samples
averageGTNotAvailable     <- 0          ## average of all instances of ./.
averageGTHomozygousRef    <- 0          ## average of all instances of 0/0
averageGTHomozygousAlt    <- 0          ## average of all instances of 1/1
averageGTHeterozygous     <- 0          ## average of all instances of 0/1
############IN-PROGRESS###################
## print statements for summary
## (will probably remove this after testing -- summarizing 100 samples: meh.)
print("sample 1 zygosity Results:")
cat(sprintf("%i counts of './.'", GTResultsMatrixPerSample[1,1]),"\n")
cat(sprintf("%i counts of '0/0'", GTResultsMatrixPerSample[2,1]),"\n")
cat(sprintf("%i counts of '1/1'", GTResultsMatrixPerSample[3,1]),"\n")
cat(sprintf("%i counts of '0/1'", GTResultsMatrixPerSample[4,1]))
}
zygosityCountsPerSample(zygosityMatrix)
View(GTResultsMatrixPerSample)
zygosityCountsPerSample <- function(GTmatrix){
## getting the dimensions of the matrix that is received as an argument to this function
numberLoci       <- dim(GTmatrix)[1]
numberSamples    <- dim(GTmatrix)[2]
## for-loop used to iterate on the columns of the GTmatrix,
## adding up counts for each of "./.", "0/0", "1/1", "0/1"
## via the count(matrix, value=termToMatchOn) function
## C.f. this "outer" loop (to the inner "count()" loops) is in row-major order
## i.e. akin to the elements of a row being consecutively referenced / "contiguous in memory"
for (i in 1:numberSamples){
## print("inside loop i = ")
## print(i)
## var definition statements
## these 4 counts reset at the beginning of each iteration of this outer loop
## (outer loop is for iterating on the samples, i.e. the 100 columns:
## one column for each of the 100 samples)
numberGTNotAvailable      <- 0          ## counting all instances of ./.
numberGTHomozygousRef     <- 0          ## counting all instances of 0/0
numberGTHomozygousAlt     <- 0          ## counting all instances of 1/1
numberGTHeterozygous      <- 0          ## counting all instances of 0/1
## the count() function is used to loop through and count the zygosity numbers,
## on a per-sample basis (i.e. count() iterates on the VCF records (i.e. the rows)
## of a given sample/column, while the outer loop iterates on the columns themselves)
## C.f. these inner loops (to the outer for-loop) is in column-major order
## i.e. akin to the elements of a column being consecutively referenced / "contiguous in memory"
numberGTNotAvailable      <- count(GTmatrix[,i], value = "./.")
numberGTHomozygousRef     <- count(GTmatrix[,i], value = "0/0")
numberGTHomozygousAlt     <- count(GTmatrix[,i], value = "1/1")
numberGTHeterozygous      <- count(GTmatrix[,i], value = "0/1")
## saving the resulting counts for each sample in a matrix of size 4 x 100
## (each of the 100 samples has 4 counts)
# GTResultsMatrixPerSample[1,i] <<- numberGTNotAvailable
# GTResultsMatrixPerSample[2,i] <<- numberGTHomozygousRef
# GTResultsMatrixPerSample[3,i] <<- numberGTHomozygousAlt
# GTResultsMatrixPerSample[4,i] <<- numberGTHeterozygous
GTResultsMatrixPerSample[i,1] <<- numberGTNotAvailable
GTResultsMatrixPerSample[i,2] <<- numberGTHomozygousRef
GTResultsMatrixPerSample[i,3] <<- numberGTHomozygousAlt
GTResultsMatrixPerSample[i,4] <<- numberGTHeterozygous
}
############IN-PROGRESS###################
## summary statistics - calculating the average # of all for counts, across all 100 samples
averageGTNotAvailable     <- 0          ## average of all instances of ./.
averageGTHomozygousRef    <- 0          ## average of all instances of 0/0
averageGTHomozygousAlt    <- 0          ## average of all instances of 1/1
averageGTHeterozygous     <- 0          ## average of all instances of 0/1
############IN-PROGRESS###################
## print statements for summary
## (will probably remove this after testing -- summarizing 100 samples: meh.)
print("sample 1 zygosity Results:")
cat(sprintf("%i counts of './.'", GTResultsMatrixPerSample[1,1]),"\n")
cat(sprintf("%i counts of '0/0'", GTResultsMatrixPerSample[1,2]),"\n")
cat(sprintf("%i counts of '1/1'", GTResultsMatrixPerSample[1,3]),"\n")
cat(sprintf("%i counts of '0/1'", GTResultsMatrixPerSample[1,4]))
}
zygosityCountsPerSample(zygosityMatrix)
write.csv(GTResultsMatrixPerSample, "GTResultsMatrixPerSample.csv")
write.csv(GTResultsMatrixPerSample, "GTResultsMatrixPerSample2.csv")
dim(GTResultsMatrixPerSample)
